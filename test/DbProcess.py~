#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#--------------------------------------------------------------
#
# naviappfeedback
#               -- API for navigation app feedback source 
#
# DbProcess.py: #TODO DESC HERE
#
#--------------------------------------------------------------
#
# Date:     2015-05-14
#
# Author:   gewu@baidu.com
#
#

#--------------------------------------------------------------
# Globl Constants & Functions
#--------------------------------------------------------------

#--------------------------------------------------------------
# Classes
#--------------------------------------------------------------

import MySQLdb
from pymongo import MongoClient
import os



class DbProcess(object):
    ''' 
    def __init__(self):
    #mysql
        self.conn = MySQLdb.connect(**CONFIG['mysql'])
        self.cur = self.conn.cursor(MySQLdb.cursors.DictCursor)
        self.conn.autocommit(True)
    #mongo
        self.client = MongoClient(**CONFIG['mongo'])
        self.modb = self.client.info
    '''

    def insertmysql(self, **params):
        table = params['table']
        fields = params['api']
        values = params['values']

        sql_insert = "INSERT INTO %s (%s) VALUES %s" % (table, fields, values) 
        print sql_insert
        try :
            self.cur.execute(sql_insert)
        except MySQLdb.Error, e:
            #print "Mysql ERROR %d: %s" % (e.args[0], e.args[1])
            return "ERROR: %s" % e.args[1]
        return self.cur.lastrowid
   
    def insertmongo(self, **params):
        try:
            obj_id = self.modb.inte_naviapp_feedback.insert(params)
        except pymongo.errors.PyMongoError as e:
            return "ERROR : %s" % e
        return obj_id

    def geom(self, geostr):
        geolist = geostr.split(",")
        ret = str(float(geolist[0])/100000)
        for i in xrange(1, len(geolist)):
            if i % 2 != 0:
                ret = "%s,"%ret
            else :
                ret = "%sG"%ret
            ret = "%s%s"%(ret, float(geolist[i])/100000)

        output = os.popen('./coordtrans/a.out gcj02ll bd09ll %s' % ret)
        
        return output.read();   
    
    def tran_geom(self, geostr):
        geolist = geostr.split(",")
        xgeo = geolist[::2]
        ygeo = geolist[1::2]

        ret = map(list, zip(xgeo, ygeo))
        return ret


if __name__ == "__main__":

    '''
    test = "11632088, 4006698"
    dbp = DbProcess()
    result = dbp.geom(test)
    result = dbp.tran_geom(result)
    ret = {}
    ret['geom'] = dict(type="LineString", coordinates=result)
    print ret
    '''

    s = "11631710,4007145,11631639,4007232"
    dbp = DbProcess()
    print dbp.tran_geom(s)

    test_data = ("A5BC5780-A9C6-334C-8DFE-28855C18E3C4", "1", "2", "701045", "0", "11631710,4007145,11631639,4007232,11631609,"\
                 "4007266", "", "11632088,4006698,11632060,4006692,11632060,4006692,11632054,4006691,11632054,4006691,11632042,4006705,11632042,4006705,11632010,4006747,11632010,4006747,11631971,4006798,11631971,4006798,11631968,4006803,11631966,4006804,11631966,4006804,11631956,4006818,11631893,4006904,11631828,4006991,11631815,4007007,11631815,4007007,11631813,4007011,11631810,4007015,11631810,4007015,11631792,4007038,11631792,4007038,11631775,4007062,11631755,4007089,11631729,4007119,11631729,4007119,11631710,4007145,11631710,4007145,11631639,4007232,11631609,4007266,11631609,4007266,11631571,4007313,11631563,4007323,11631563,4007323,11631566,4007331,11631570,4007339,11631570,4007339,11631577,4007344,11631582,4007345,11631582,4007345,11631590,4007349,11631620,4007358,11631677,4007377,11631683,4007378,11631686,4007380,11631690,4007383,11631694,4007388,11631696,4007390,11631697,4007392,11631697,4007392,11631699,4007396,11631701,4007405,11631703,4007417,11631705,4007421,11631709,4007426,11631726,4007439,11631726,4007439,11631808,4007462,11631825,4007466,11631825,4007466,11631873,4007480,11631873,4007480,11631886,4007483,11631889,4007484,11631940,4007497,11631940,4007497,11631956,4007502,11631975,4007506,11631975,4007506,11632012,4007518,11632012,4007518,11632125,4007551,11632153,4007560,11632153,4007560,11632222,4007580,11632222,4007580,11632250,4007589,11632250,4007589,11632305,4007607", "11632100,4006694,11632093,4006704,11632083,4006703,11632069,4006702,11632056,4006704,11632047,4006713,11632040,4006720,11632033,4006727,11632026,4006736,11632019,4006745,11632012,4006753,11632006,4006763,11631999,4006771,11631992,4006781,11631985,4006789,11631979,4006797,11631973,4006807,11631965,4006818,11631958,4006826,11631952,4006834,11631945,4006844,11631936,4006853,11631927,4006863,11631919,4006872,11631911,4006881,11631903,4006891,11631896,4006901,11631890,4006911,11631882,4006921,11631875,4006931,11631869,4006942,11631862,4006951,11631855,4006962,11631849,4006973,11631841,4006982,11631835,4006992,11631829,4007000,11631824,4007013,11631816,4007023,11631807,4007032,11631799,4007041,11631793,4007050,11631788,4007059,11631778,4007069,11631767,4007077,11631760,4007087,11631754,4007095,11631750,4007104,11631752,4007114,11631762,4007121", "0.2", "1", "1", "2222", "2121")




